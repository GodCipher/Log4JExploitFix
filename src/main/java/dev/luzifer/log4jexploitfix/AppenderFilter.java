package dev.luzifer.log4jexploitfix;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.core.Appender;
import org.apache.logging.log4j.core.LogEvent;
import org.apache.logging.log4j.core.Logger;
import org.apache.logging.log4j.core.filter.AbstractFilter;
import org.apache.logging.log4j.core.filter.AbstractFilterable;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class AppenderFilter {
    
    public static void tryApply(java.util.logging.Logger logger) {
        
        try {
            List<String> names = apply();
            logger.info("Successfully applied filters to Appenders " + String.join(", ", names));
        } catch (Throwable t) {
            logger.warning("Could not add filters to logger. Logger version is probably incompatible!");
        }
    }
    
    private static List<String> apply() {
        
        Map<String, Appender> appenders = ((Logger) LogManager.getRootLogger()).getAppenders();
        LoggerFilter filter = new LoggerFilter();
        
        List<Appender> filterable = appenders.values().stream()
                .filter((appender -> appender instanceof AbstractFilterable))
                .collect(Collectors.toList());
        
        filterable.forEach(appender -> ((AbstractFilterable) appender).addFilter(filter));
        
        return filterable.stream()
                .map(Appender::getName)
                .collect(Collectors.toList());
    }
    
    private static class LoggerFilter extends AbstractFilter {
        
        @Override
        public Result filter(LogEvent event) {
            
            String message = event.getMessage().getFormattedMessage();

            if(message == null) {
                return super.filter(event);
            }
            
            if (message.indexOf('$') != -1 && Log4JExploitFix.pattern.matcher(message.toLowerCase()).find())
                return Result.DENY;
            
            return super.filter(event);
        }
    }
}
